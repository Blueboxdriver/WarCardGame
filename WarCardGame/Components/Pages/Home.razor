@page "/"
@using WarCardGame.models
@using WarCardGame.services

<PageTitle>Home</PageTitle>

<!-- Player selection dropdown -->
Please select the amount of players:
<select @bind="_playerSelection">
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
</select>

<button @onclick="StartGame" disabled="@_gameInProgress">Start Game</button> <!-- Initializes the game -->
<br/><br/>

@if (_gameInProgress) // If the game is in progress, we reveal the buttons that allow the player to play the game.
{
    <button @onclick="StartRound" disabled="@_cardsDrawn">Draw Cards</button>
    <br/>
    <br/>
    <button @onclick="FindWinner" disabled="@_cardsCompared">Compare Cards</button>
    <br/>
    <br/>
    <button @onclick="DeclareWinner" disabled="@_winnerDeclared">Declare Winner</button>
    <br/>
    <br/>
    <button @onclick="Automatic">Automatic</button>

    @foreach (string playerName in _game.ListOfActivePlayers) // We display the amount of cards a player has at all times.
    {
        Card? playedCard = null;
        if (_game._PlayedCards.PlayedHand.ContainsKey(playerName))
        {
            playedCard = _game._PlayedCards.PlayedHand[playerName];
        }

        string playedCardInfo = "";
        if (playedCard != null) // We create a string that makes it easier to print out a played card's suit and value.
        {
            playedCardInfo = $"| {playedCard.Suit} | {playedCard.Rank}"; // Furthermore, assuming there are played cards, we display their suit and value.
        }

        <p>@playerName | Deck Size: @_game._PlayerHands.HandQueue[playerName].Cards.Count @playedCardInfo</p>
    }

    if (_game.IsTied) // If the game is tied, we print this out to the screen.
    {
        <p style="text-align: center">Game is tied, comparing cards will run rematch.</p>
    }
}
else // If the game is not in progress, then we display our winner and offer the player a chance to play again.
{
    foreach (string winner in _game.ListOfActivePlayers)
    {
        <h1>WINNER: @winner</h1>
    }

    <br/>
    <button @onclick="RefillDeck">Refill Deck and play again?</button> // This won't automatically start a new game, it only refills the deck.
}

<div style="float:right;">
    <!-- This div displays relevant game data to the right of the screen -->
    <p>Cards in Deck (Pot): @_game._Deck.Cards.Count</p>
    <br/>
    <button @onclick="TurnOffAutomatic">Toggle Automatic mode.</button>
    <p>Automatic mode toggled: @_isAutomatic</p> <!-- Toggles automatic mode -->
    <br/>
    <p>@_gameCounter</p>
</div>

@code {

    /// <summary>
    ///     A GameRound object representing the gameround service.
    /// </summary>
    private readonly GameRound _game = new();

    /// <summary>
    ///     The amount of players starting off in the game.
    /// </summary>
    private int _playerCount;

    /// <summary>
    ///     The default selection of players.
    /// </summary>
    private string _playerSelection = "2";

    /// <summary>
    ///     A boolean reflecting whether the game is in progress or not.
    /// </summary>
    private bool _gameInProgress;

    /// <summary>
    ///     A players object that is used to collect player names.
    /// </summary>
    private readonly Players _dictionaryOfPlayers = new();

    /// <summary>
    ///     Integer representing the total amount of games played.
    /// </summary>
    private int _gameCounter;

    /// <summary>
    ///     A boolean that reflects the status of automatic mode.
    /// </summary>
    private bool _isAutomatic;

    /// <summary>
    ///     A string that stores the string reflecting the winner's name from the service's findWinner method.
    /// </summary>
    private string _winnerName = "";

    /// <summary>
    ///     A boolean reflecting whether a player has drawn cards yet.
    /// </summary>
    private bool _cardsDrawn;

    /// <summary>
    ///     A boolean reflecting whether a player has compared cards yet.
    /// </summary>
    private bool _cardsCompared;

    /// <summary>
    ///     A boolean reflecting whether a player has had their cards compared and a winner has been determined.
    /// </summary>
    private bool _winnerDeclared;

    /// <summary>
    ///     A cancellation token used to stop automatic mode.
    /// </summary>
    private CancellationTokenSource _cancellationTokenSource;

    /// <summary>
    ///     Starts the game by collecting the playercounter, creating the list of players, and calling on the service to start
    ///     the game with the provided information.
    /// </summary>
    private void StartGame()
    {
        _gameInProgress = true;
        int.TryParse(_playerSelection, out _playerCount);

// Initialize active players
        _game.ListOfActivePlayers = _dictionaryOfPlayers.PlayerNames.Values.ToList();

        foreach (string playerName in _game.ListOfActivePlayers)
        {
            _game.StartGame(playerName, _playerCount);
        }
    }

    /// <summary>
    ///     Starts a round by calling on the service to start a new round.
    /// </summary>
    private void StartRound()
    {
        foreach (string name in _game.ListOfActivePlayers)
        {
            _game.RoundStart(name);
        }

        _cardsDrawn = true;
        _cardsCompared = false;
    }

    /// <summary>
    ///     Compares the drawn cards by calling on the Server to determine a winner with the <see cref="FindWinner" /> method.
    /// </summary>
    private void FindWinner()
    {
        _winnerName = _game.FindWinner();
        _game._PlayedCards.ClearPlay();
        _game.FindGameWinner(); // Check if the game has been won

        if (_game.GameWon)
        {
            _gameInProgress = false; // Stop the game if won
        }

        _cardsCompared = true;
        _winnerDeclared = false;
    }

    /// <summary>
    ///     Calls on the service to determine the winner of a round
    /// </summary>
    private void DeclareWinner()
    {
        if (_game._PlayerHands.HandQueue.TryGetValue(_winnerName, out Hand winnerHand)) // This verifies we're getting an actual Hand object.
        {
            _game.EndRound(winnerHand);
            _game.FindGameWinner();
            _winnerDeclared = true;
            _cardsDrawn = false;
        }
    }

    /// <summary>
    ///     Asynchronously process the game at extremely high speeds to provide a timely testing environment.
    /// </summary>
    private async Task Automatic()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        CancellationToken token = _cancellationTokenSource.Token;
        // I heavily advise not touching the values of the delay Task. The automatic method itself isn't entirely stable
        // and you may experience errors that wouldn't happen if you played normally. 
        // In short, if you change the values only for it to break, it isn't my fault.
        while (_gameInProgress && _isAutomatic)
        {
            await Task.Delay(50, token);
            StartRound();
            StateHasChanged();
            await Task.Delay(50, token);

            FindWinner();
            StateHasChanged();
            await Task.Delay(50, token);

            DeclareWinner();
            StateHasChanged();
            await Task.Delay(50, token);

            if (_game.GameWon)
            {
                await Task.Delay(1000);
                RefillDeck();
                await Task.Delay(300);
                StartGame();
                await Task.Delay(1000);
                _gameCounter++;
                await Automatic();
                break;
            }
        }
    }

    /// <summary>
    ///     Handles turning off automatic mode.
    /// </summary>
    private void TurnOffAutomatic()
    {
        _isAutomatic = !_isAutomatic;
        if (!_isAutomatic && _cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel();
        }

        StateHasChanged();
    }

    /// <summary>
    ///     Refills the deck with 52 cards, essentially resetting the game when it's complete.
    /// </summary>
    private void RefillDeck()
    {
        _game._Deck.RebuildDeck();

        foreach (Hand player in _game._PlayerHands.HandQueue.Values)
        {
            player.Cards.Clear(); // Clear the Cards queue for each player
        }

        // Reset game data
        _game.GameCount = 0;
        _game.GameWon = false;
        _game.ListOfActivePlayers.Clear();
        _gameInProgress = false;
    }

}