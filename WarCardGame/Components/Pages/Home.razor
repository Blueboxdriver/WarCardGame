@page "/"
@using WarCardGame.models
@using WarCardGame.services

<PageTitle>Home</PageTitle>

Please select the amount of players:
<select @bind="_playerSelection">
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
</select>

<button @onclick="StartGame" disabled="@_gameInProgress">Start Game</button>
<br/> <br/>

@if (_gameInProgress)
{
    <button @onclick="StartRound"> Draw Cards </button>
    <br/>
    <br/>
    <button @onclick="FindWinner"> Compare Cards </button>
    <br/>
    <br/>
    <button @onclick="async () => await AutomaticPlay()"> Play Automatically? </button>

    if (_game._PlayedCards.PlayedHand.Count == 0)
    {
        foreach (KeyValuePair<string, Hand> thing in _game._PlayerHands.HandQueue)
        {
            <p>@thing.Key | @thing.Value.Cards.Count </p>
        }
    }
    else if (_game._PlayedCards.PlayedHand.Count > 0)
    {
        foreach (KeyValuePair<string, Card> thing in _game._PlayedCards.PlayedHand)
        {
            <p>@thing.Key | @thing.Value.Suit | @thing.Value.Rank</p>
        }
    }
}
else if (!_gameInProgress)
{
    foreach (string winner in _game.ListOfActivePlayers)
    {
        <h1> WINNER: @winner</h1>
    }

    <br/>
    <button @onclick="RefillDeck">Refill Deck?</button>
}


<div style="float:right;">
    <p>Cards in Deck (Pot): @_game._Deck.Cards.Count</p>
</div>


@code {
    private readonly GameRound _game = new();
    private int _playerCount;
    private string _playerSelection = "1";
    private string _playerName = "";
    private bool _gameInProgress;
    private readonly Players _dictionaryOfPlayers = new();


    private void StartGame()
    {
        _gameInProgress = true;
        int.TryParse(_playerSelection, out _playerCount);
        _game.PlayerCount = _playerCount;

        for (int i = 0; i < _game.PlayerCount; i++)
        {
            _playerName = _dictionaryOfPlayers.PlayerNames[i];
            _game.ListOfActivePlayers.Add(_playerName);
            _game.StartGame(_playerName, _game.PlayerCount);
        }
    }

    private void StartRound()
    {
        foreach (string name in _game.ListOfActivePlayers)
        {
            _game.RoundStart(name);
        }
    }

    private void FindWinner()
    {
        _game.FindWinner();
        _game._PlayedCards.ClearPlay();
        _game.FindGameWinner(); // Check if the game has been won

        if (_game.GameWon)
        {
            _gameInProgress = false; // Stop the game if won
        }
    }

    private async Task AutomaticPlay()
    {
        while (_gameInProgress)
        {
            await Task.Delay(1); // Non-blocking delay
            StartRound();
            StateHasChanged(); // Manually trigger a UI refresh
            await Task.Delay(1); // Non-blocking delay
            FindWinner();
            StateHasChanged(); // Manually trigger a UI refresh
        }
    }

    private void RefillDeck()
    {
        _game._Deck.RebuildDeck();

        foreach (KeyValuePair<string, Hand> player in _game._PlayerHands.HandQueue)
        {
            player.Value.Cards.Clear(); // Clear the Cards queue for each player
        }

        // Reset game data
        _game.GameCount = 0;
        _game.GameWon = false;
        _game.ListOfActivePlayers.Clear();
        _gameInProgress = false;
    }

}