@page "/"
@using WarCardGame.models
@using WarCardGame.services

<PageTitle>Home</PageTitle>

<!-- Player selection dropdown -->
Please select the amount of players:
<select @bind="_playerSelection">
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
</select>

<button @onclick="StartGame" disabled="@_gameInProgress">Start Game</button>
<br/><br/>

@if (_gameInProgress)
{
    <button @onclick="StartRound" disabled="@_cardsDrawn">Draw Cards</button>
    <br/>
    <br/>
    <button @onclick="FindWinner" disabled="@_cardsCompared">Compare Cards</button>
    <br/>
    <br/>
    <button @onclick="DeclareWinner" disabled="@_winnerDeclared">Declare Winner</button>
    <br/>
    <br/>
    <button @onclick="Automatic">Automatic</button>

    @foreach (string playerName in _game.ListOfActivePlayers)
    {
        Card? playedCard = _game._PlayedCards.PlayedHand.ContainsKey(playerName) ? _game._PlayedCards.PlayedHand[playerName] : null;
        <p>@playerName | Deck Size: @_game._PlayerHands.HandQueue[playerName].Cards.Count @(playedCard != null ? $"| {playedCard.Suit} | {playedCard.Rank}" : "")</p>
    }

    if (_game.IsTied)
    {
        <p style="text-align: center">Game is tied, comparing cards will run rematch.</p>
    }
}
else
{
    foreach (string winner in _game.ListOfActivePlayers)
    {
        <h1>WINNER: @winner</h1>
    }

    <br/>
    <button @onclick="RefillDeck">Refill Deck?</button>
}

<div style="float:right;">
    <p>Cards in Deck (Pot): @_game._Deck.Cards.Count</p>
    <br/>
    <button @onclick="TurnOffAutomatic">Toggle Automatic mode.</button>
    <p>Automatic mode toggled: @_isAutomatic</p>
    <br/>
    <p>@_gameCounter</p>
</div>

@code {
    private readonly GameRound _game = new();
    private int _playerCount;
    private string _playerSelection = "1";
    private bool _gameInProgress;
    private readonly Players _dictionaryOfPlayers = new();
    private int _gameCounter;
    private bool _isAutomatic;
    private string _winnerName = "";
    private bool _cardsDrawn;
    private bool _cardsCompared;
    private bool _winnerDeclared;
    private CancellationTokenSource _cancellationTokenSource;

    private void StartGame()
    {
        _gameInProgress = true;
        int.TryParse(_playerSelection, out _playerCount);

// Initialize active players
        _game.ListOfActivePlayers = _dictionaryOfPlayers.PlayerNames.Values.ToList();

        foreach (string playerName in _game.ListOfActivePlayers)
        {
            _game.StartGame(playerName, _playerCount);
        }
    }

    private void StartRound()
    {
        foreach (string name in _game.ListOfActivePlayers)
        {
            _game.RoundStart(name);
        }

        _cardsDrawn = true;
        _cardsCompared = false;
    }

    private void FindWinner()
    {
        _winnerName = _game.FindWinner();
        _game._PlayedCards.ClearPlay();
        _game.FindGameWinner(); // Check if the game has been won

        if (_game.GameWon)
        {
            _gameInProgress = false; // Stop the game if won
        }

        _cardsCompared = true;
        _winnerDeclared = false;
    }

    private void DeclareWinner()
    {
        if (_game._PlayerHands.HandQueue.TryGetValue(_winnerName, out Hand winnerHand))
        {
            _game.EndRound(winnerHand);
            _game.FindGameWinner();
            _winnerDeclared = true;
            _cardsDrawn = false;
        }
    }

    private async Task Automatic()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        CancellationToken token = _cancellationTokenSource.Token;

        while (_gameInProgress && _isAutomatic)
        {
            await Task.Delay(5, token);
            StartRound();
            StateHasChanged(); 
            await Task.Delay(5, token);

            FindWinner();
            StateHasChanged(); 
            await Task.Delay(5, token);
        
            DeclareWinner();
            StateHasChanged(); 
            await Task.Delay(5, token);

            if (_game.GameWon)
            {
                await Task.Delay(1000);
                RefillDeck(); 
                await Task.Delay(300); 
                StartGame(); 
                await Task.Delay(1000); 
                _gameCounter++; 
                await Automatic(); 
                break; 
            }
        }
    }


    private void TurnOffAutomatic()
    {
        _isAutomatic = !_isAutomatic;
        if (!_isAutomatic && _cancellationTokenSource != null)
        {
            _cancellationTokenSource.Cancel();
        }

        StateHasChanged();
    }

    private void RefillDeck()
    {
        _game._Deck.RebuildDeck();

        foreach (Hand player in _game._PlayerHands.HandQueue.Values)
        {
            player.Cards.Clear(); // Clear the Cards queue for each player
        }

// Reset game data
        _game.GameCount = 0;
        _game.GameWon = false;
        _game.ListOfActivePlayers.Clear();
        _gameInProgress = false;
    }

}