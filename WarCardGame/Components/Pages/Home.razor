@page "/"
@using WarCardGame.models
@using WarCardGame.services

<PageTitle>Home</PageTitle>

Please select the amount of players:
<select @bind="_playerSelection">
    <option value="2">Two</option>
    <option value="3">Three</option>
    <option value="4">Four</option>
</select>

<button @onclick="StartGame" disabled="@_gameInProgress">Start Game</button>
<br/> <br/>

@if (_gameInProgress)
{
    <button @onclick="StartRound"> Draw Cards </button>
    <br/>
    <br/>
    <button @onclick="FindWinner"> Compare Cards </button>
    <br/>
    <br/>
    <button @onclick="DeclareWinner"> Compare Cards </button>
    <br/>
    <br/>
    <button @onclick="Automatic"> Automatic </button>
    
    foreach (string playerName in _game.ListOfActivePlayers)
    {
        if (_game._PlayedCards.PlayedHand.Count == 0)
        {
            <p>@playerName | Deck Size: @_game._PlayerHands.HandQueue[playerName].Cards.Count</p>
        }
        else if (_game._PlayedCards.PlayedHand.Count > 0)
        {
            <p>@playerName | @_game._PlayedCards.PlayedHand[playerName].Suit | @_game._PlayedCards.PlayedHand[playerName].Rank </p>
        }
    }

}
else if (!_gameInProgress)
{
    foreach (string winner in _game.ListOfActivePlayers)
    {
        <h1> WINNER: @winner</h1>
    }

    <br/>
    <button @onclick="RefillDeck">Refill Deck?</button>
}


<div style="float:right;">
    <p>Cards in Deck (Pot): @_game._Deck.Cards.Count</p>
    <br/>
    <button @onclick="TurnOffAutomatic"> Turn off Automatic mode. </button>
    <p> Automatic mode toggled: @IsAutomatic</p>
    <br/>
    <p>@GameCounter</p>
</div>


@code {
    private readonly GameRound _game = new();
    private int _playerCount;
    private string _playerSelection = "1";
    private string _playerName = "";
    private bool _gameInProgress;
    private readonly Players _dictionaryOfPlayers = new();
    private int GameCounter;
    private bool IsAutomatic;
    private string winnerName;



    private void StartGame()
    {
        _gameInProgress = true;
        int.TryParse(_playerSelection, out _playerCount);

        for (int i = 0; i < _playerCount; i++)
        {
            _game.ListOfActivePlayers.Add(_dictionaryOfPlayers.PlayerNames[i]);
        }

        foreach (string playerName in _game.ListOfActivePlayers)
        {
            _game.StartGame(playerName, _playerCount);
        }
    }

    private void StartRound()
    {
        foreach (string name in _game.ListOfActivePlayers)
        {
            _game.RoundStart(name);
        }
    }

    private void FindWinner()
    {
        winnerName = _game.FindWinner();
        _game._PlayedCards.ClearPlay();
        _game.FindGameWinner(); // Check if the game has been won

        if (_game.GameWon)
        {
            _gameInProgress = false; // Stop the game if won
        }
    }

    private void DeclareWinner()
    {
        _game.EndRound(_game._PlayerHands.HandQueue[winnerName]);
    }

    private async Task Automatic()
    {
        if (IsAutomatic)
        {
            while (_gameInProgress)
            {
                await Task.Delay(1);
                StartRound();
                StateHasChanged();
                await Task.Delay(1);
                StateHasChanged();
                FindWinner();
                StateHasChanged();
            }

            await Task.Delay(1000);
            RefillDeck();
            await Task.Delay(300);
            StartGame();
            await Task.Delay(1000);
            GameCounter++;
            Automatic();
        }
    }

    public void TurnOffAutomatic()
    {
        if (IsAutomatic)
        {
            IsAutomatic = false;
        }

        if (!IsAutomatic)
        {
            IsAutomatic = true;

        }
        StateHasChanged();
    }

    private void RefillDeck()
    {
        _game._Deck.RebuildDeck();

        foreach (KeyValuePair<string, Hand> player in _game._PlayerHands.HandQueue)
        {
            player.Value.Cards.Clear(); // Clear the Cards queue for each player
        }

        // Reset game data
        _game.GameCount = 0;
        _game.GameWon = false;
        _game.ListOfActivePlayers.Clear();
        _gameInProgress = false;
    }

}